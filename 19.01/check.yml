- name: EC2
  become: yes
  hosts: localhost
  vars_files:
    - aws.yml
  tasks:
    - name: Make Sure Boto Is Installed
      pip:
        name: boto
        state: present

    - name: Make Sure Boto3 Is Installed
      pip:
        name: boto3
        state: present

    - name: Make Sure Docker py Is Installed
      pip:
        name: docker-py
        state: present

    - name: Creating Security Group for EC2 on AWS
      ec2_group:
        name: MySecurityGroup
        description: Security Group for EC2 allowing port for http and ssh
        region: us-east-2
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 172.31.0.0/16
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 172.31.0.0/16
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 172.31.0.0/16
          - porto: tcp
            from_port: 22
            to_port: 22
            cidr_id: 141.226.13.132/32 #my local ip
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create First Instance
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: ansible
        instance_type: t2.micro
        image: ami-0a91cd140a1fc148a
        region: us-east-2
        wait: yes
        group: MySecurityGroup
        count: 1
        vpc_subnet_id: subnet-6d73ae06
        assign_public_ip: yes
        instance_tags:
          Name: first instance

      register: ec2

    - name: Create Second Instance
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: ansible
        instance_type: t2.micro
        image: ami-0a91cd140a1fc148a
        region: us-east-2
        wait: yes
        group: MySecurityGroup
        count: 1
        vpc_subnet_id: subnet-6d73ae06
        assign_public_ip: yes
        instance_tags:
          Name: second instance

      register: ec21

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: firstec2
      loop: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: firstec21
      loop: "{{ ec21.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      loop: "{{ ec21.instances }}"

- hosts: firstec2
  gather_facts: no
  tasks:
    - name: running role
      include_role:
        name: ec2-1

- hosts: firstec21
  gather_facts: no
  tasks:
    - name: running role
      include_role:
        name: ec2-2

        # vars file for test-role
        ---
        {
          "keypair": "intjoey2020",
          "instance_type": "t2.micro",
          "security_group": "Sec_Group",
          "image": "ami-0dd9f0e7df0f0a138",
          "region": "us-east-2",
          "subnet": "subnet-a27733ee",
          "ec2_access_key": "AKIAXWJMJ7PVDJ757ZEY",
          "ec2_secret_key": "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"
        }